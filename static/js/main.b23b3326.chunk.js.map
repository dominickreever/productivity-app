{"version":3,"sources":["components/Form.js","components/FilterButton.js","components/Todo.js","App.js","index.js"],"names":["Form","props","useState","name","setName","className","onSubmit","e","preventDefault","addTask","type","id","autoComplete","value","onChange","target","FilterButton","aria-pressed","isPressed","onClick","setFilter","Todo","isEditing","setEditing","newName","setNewName","editingTemplate","editTask","htmlFor","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","App","tasks","setTasks","filter","updatedTasks","map","remainingTasks","editedTaskList","taskList","filterList","tasksNoun","length","headingText","newTask","nanoid","role","aria-labelledby","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b23b3326.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nexport default function Form(props) {\n\n    const [name, setName] = useState(\"\");\n\n    function handleChange(e) {\n        setName(e.target.value);\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        if (name !== \"\") {\n            props.addTask(name);\n            setName(\"\"); \n        }\n       \n    }\n\n    return (\n        <form className=\"temp\" onSubmit={handleSubmit}>\n          <input type=\"text\" id=\"new-todo-input\" name=\"text\" autoComplete=\"off\" value={name} onChange={handleChange} />\n          <button type=\"submit\">Write Task</button>\n        </form>\n    );\n  }","export default function FilterButton(props) {\n    return (\n        <button type=\"button\" aria-pressed={props.isPressed} onClick={() => props.setFilter(props.name)}>\n          <span>Show </span>\n          <span>{props.name}</span>\n          <span> tasks</span>\n        </button>\n    );\n  }","import React, { useState } from \"react\";\n\nexport default function Todo(props) {\n\n    const [isEditing, setEditing] = useState(false);\n\n    const [newName, setNewName] = useState(\"\");\n\n    function handleChange(e) {\n      setNewName(e.target.value);\n    }\n\n    function handleSubmit(e) {\n      e.preventDefault();\n      props.editTask(props.id, newName);\n      setNewName(\"\");\n      setEditing(false);\n    }\n\n    const editingTemplate = (\n      <form className=\"temp\" onSubmit={handleSubmit}>\n        <div>\n          <label htmlFor={props.id}>New name for {props.name}</label>\n          <input id={props.id} type=\"text\" value={newName} onChange={handleChange} />\n        </div>\n        <div className=\"temp-btns\">\n          <button type=\"button\" onClick={() => setEditing(false)}>Cancel</button>\n          <button type=\"submit\">Save</button>\n        </div>\n      </form>\n    );\n\n    const viewTemplate = (\n      <div className=\"temp\">\n        <div>\n            <input id={props.id} type=\"checkbox\" defaultChecked={props.completed} onChange={() => props.toggleTaskCompleted(props.id)} />\n            <label htmlFor={props.id}>{props.name}</label>\n          </div>\n          <div className=\"temp-btns\">\n            <button type=\"button\" onClick={() => setEditing(true)}>Edit</button>\n            <button type=\"button\" onClick={() => props.deleteTask(props.id)}>Erase</button>\n          </div>\n      </div>\n    );\n\n    return (\n        <li className=\"tasklist-item\">{isEditing ? editingTemplate : viewTemplate}</li>\n    );\n  }","import React, { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport Todo from \"./components/Todo\";\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\n\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nexport default function App(props) {\n\n  const [tasks, setTasks] = useState(props.tasks);\n\n  const [filter, setFilter] = useState(\"All\");\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      if (id === task.id) {\n        return {...task, completed: !task.completed}\n      }\n      return task;\n      });\n      setTasks(updatedTasks);\n  }\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n      if (id === task.id) {\n        return {...task, name: newName}\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  function addTask(name) {\n    const newTask = {id: \"todo-\" + nanoid(), name: name, completed: false};\n    setTasks([...tasks, newTask]);\n  }\n\n  const taskList = tasks\n  .filter(FILTER_MAP[filter])\n  .map(task => \n  <Todo id={task.id} name={task.name} completed={task.completed} key={task.id} toggleTaskCompleted={toggleTaskCompleted} deleteTask={deleteTask} editTask={editTask} />\n  );\n\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton key={name} name={name} isPressed={name === filter} setFilter={setFilter} />\n  ));\n\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  return (\n    <div className=\"wrapper\">\n      <h1>Task List</h1>\n      <Form addTask={addTask} />\n      <div className=\"filter-btns\">\n        {filterList}\n      </div>\n      <br></br>\n      <h2>{headingText}</h2>\n      <ul role=\"list\" aria-labelledby=\"list-heading\">\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nconst DATA = [];\n\nReactDOM.render(\n    <App tasks={DATA} />,\n  document.getElementById('root')\n);"],"sourceRoot":""}