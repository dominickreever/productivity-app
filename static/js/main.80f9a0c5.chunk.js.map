{"version":3,"sources":["components/Form.js","components/FilterButton.js","components/Todo.js","App.js","index.js"],"names":["Form","props","useState","name","setName","onSubmit","e","preventDefault","addTask","className","htmlFor","type","id","autoComplete","value","onChange","target","FilterButton","aria-pressed","isPressed","onClick","setFilter","Todo","isEditing","setEditing","newName","setNewName","editingTemplate","editTask","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","console","log","App","tasks","setTasks","filter","updatedTasks","map","remainingTasks","editedTaskList","taskList","filterList","tasksNoun","length","headingText","newTask","nanoid","role","aria-labelledby","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.80f9a0c5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nexport default function Form(props) {\n\n    const [name, setName] = useState(\"\");\n\n    function handleChange(e) {\n        setName(e.target.value);\n    }\n\n    function handleSubmit(e) {\n        if (name !== \"\") {\n            e.preventDefault();\n            props.addTask(name);\n            setName(\"\"); \n        }\n       \n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n        <h2 className=\"label-wrapper\">\n          <label htmlFor=\"new-todo-input\" className=\"label__lg\">\n            What needs to be done?\n          </label>\n        </h2>\n        <input\n          type=\"text\"\n          id=\"new-todo-input\"\n          className=\"input input__lg\"\n          name=\"text\"\n          autoComplete=\"off\"\n          value={name}\n          onChange={handleChange}\n        />\n        <button type=\"submit\" className=\"btn btn__primary btn__lg\">\n          Add\n        </button>\n      </form>\n    );\n  }","export default function FilterButton(props) {\n    return (\n        <button type=\"button\" className=\"btn toggle-btn\" aria-pressed={props.isPressed} onClick={() => props.setFilter(props.name)}>\n          <span className=\"visually-hidden\">Show </span>\n          <span>{props.name}</span>\n          <span className=\"visually-hidden\"> tasks</span>\n        </button>\n    );\n  }","import React, { useState } from \"react\";\n\nexport default function Todo(props) {\n\n    const [isEditing, setEditing] = useState(false);\n\n    const [newName, setNewName] = useState(\"\");\n\n    function handleChange(e) {\n      setNewName(e.target.value);\n    }\n\n    function handleSubmit(e) {\n      e.preventDefault();\n      props.editTask(props.id, newName);\n      setNewName(\"\");\n      setEditing(false);\n    }\n\n    const editingTemplate = (\n      <form className=\"stack-small\" onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label className=\"todo-label\" htmlFor={props.id}>\n            New name for {props.name}\n          </label>\n          <input id={props.id} className=\"todo-text\" type=\"text\" value={newName} onChange={handleChange} />\n        </div>\n        <div className=\"btn-group\">\n          <button type=\"button\" className=\"btn todo-cancel\" onClick={() => setEditing(false)}>\n            Cancel\n            <span className=\"visually-hidden\">renaming {props.name}</span>\n          </button>\n          <button type=\"submit\" className=\"btn btn__primary todo-edit\">\n            Save\n            <span className=\"visually-hidden\">new name for {props.name}</span>\n          </button>\n        </div>\n      </form>\n    );\n\n    const viewTemplate = (\n      <div className=\"stack-small\">\n        <div className=\"c-cb\">\n            <input\n              id={props.id}\n              type=\"checkbox\"\n              defaultChecked={props.completed}\n              onChange={() => props.toggleTaskCompleted(props.id)}\n            />\n            <label className=\"todo-label\" htmlFor={props.id}>\n              {props.name}\n            </label>\n          </div>\n          <div className=\"btn-group\">\n            <button type=\"button\" className=\"btn\" onClick={() => setEditing(true)}>\n              Edit <span className=\"visually-hidden\">{props.name}</span>\n            </button>\n            <button\n              type=\"button\"\n              className=\"btn btn__danger\"\n              onClick={() => props.deleteTask(props.id)}\n            >\n              Delete <span className=\"visually-hidden\">{props.name}</span>\n            </button>\n          </div>\n      </div>\n    );\n\n    return (\n        <li className=\"todo\">\n        {isEditing ? editingTemplate : viewTemplate}\n      </li>\n    );\n  }","import React, { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport Todo from \"./components/Todo\";\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\n\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nconsole.log(FILTER_NAMES);\n\nfunction App(props) {\n\n  const [tasks, setTasks] = useState(props.tasks);\n\n  const [filter, setFilter] = useState(\"All\");\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      if (id === task.id) {\n        return {...task, completed: !task.completed}\n      }\n      return task;\n      });\n      setTasks(updatedTasks);\n  }\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n      if (id === task.id) {\n        return {...task, name: newName}\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  function addTask(name) {\n    const newTask = {id: \"todo-\" + nanoid(), name: name, completed: false};\n    setTasks([...tasks, newTask]);\n  }\n\n  const taskList = tasks\n  .filter(FILTER_MAP[filter])\n  .map(task => \n  <Todo id={task.id} name={task.name} completed={task.completed} key={task.id} toggleTaskCompleted={toggleTaskCompleted} deleteTask={deleteTask} editTask={editTask} />\n  );\n\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton key={name} name={name} isPressed={name === filter} setFilter={setFilter} />\n  ));\n\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>Todo App</h1>\n      <Form addTask={addTask} />\n      <div className=\"filters btn-group stack-exception\">\n        {filterList}\n      </div>\n      <h2 id=\"list-heading\">\n        {headingText}\n      </h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nconst DATA = [];\n\nReactDOM.render(\n    <App tasks={DATA} />,\n  document.getElementById('root')\n);"],"sourceRoot":""}